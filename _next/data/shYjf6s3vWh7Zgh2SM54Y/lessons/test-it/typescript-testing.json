{"pageProps":{"post":{"attributes":{"title":"TypeScript : Projector Tests","description":"Lets test this bad boi"},"html":"<h3 id=\"lets-add-some-tests\">Lets add some tests</h3>\n<pre><code class=\"hljs language-bash\">src/__tests__/config.ts\n</code></pre>\n<p><em>NOTE</em> I had errors with jest v28 and ts-jest.  Make sure we use 27, unless its\nfixed by the time i do this presentation or you are watching it and we can\nignore it :)</p>\n<pre><code class=\"hljs language-bash\">yarn add -D jest ts-jest @types/jest\nnpx jest --init\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"when-running-npm-run-test\">When running npm run test</h3>\n<p>if you get the following error its likely because preset: &quot;ts-jest&quot; isn&#39;t added</p>\n<pre><code class=\"hljs language-bash\">src/__tests__/config.ts\n  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not\n configured to support such syntax.\n\n    Out of the box Jest supports Babel, <span class=\"hljs-built_in\">which</span> will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default <span class=\"hljs-string\">&quot;node_modules&quot;</span> folder is ignored by transformers.\n\n    Here<span class=\"hljs-string\">&#x27;s what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your &quot;node_modules&quot; files transformed, you can specify a custom &quot;transformIgnorePatterns&quot; in your config.\n     • If you need a custom transformation specify a &quot;transform&quot; option in your config.                                                           • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the &quot;moduleNameMapper&quot; config option.\n    You&#x27;</span>ll find more details and examples of these config options <span class=\"hljs-keyword\">in</span> the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n\n\n<h3 id=\"your-code-could-look-like-this\">Your code could look like this!</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> getProjectorConfig, { <span class=\"hljs-title class_\">Operation</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../config&quot;</span>;\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;should create a print projector config&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-title function_\">getProjectorConfig</span>({});\n    <span class=\"hljs-title function_\">expect</span>(config.<span class=\"hljs-property\">operation</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-title class_\">Operation</span>.<span class=\"hljs-property\">Print</span>);\n});\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;should create an add projector config&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-title function_\">getProjectorConfig</span>({\n        <span class=\"hljs-attr\">arguments</span>: [<span class=\"hljs-string\">&quot;add&quot;</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>],\n    });\n    <span class=\"hljs-title function_\">expect</span>(config.<span class=\"hljs-property\">operation</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-title class_\">Operation</span>.<span class=\"hljs-property\">Add</span>);\n    <span class=\"hljs-title function_\">expect</span>(config.<span class=\"hljs-property\">arguments</span>).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>]);\n});\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n\n","slug":"typescript-testing","title":"TypeScript : Projector Tests","section":"Test It","icon":"info-circle","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/06-test-it/A-typescript-testing.md","nextSlug":"/ts-go-rust/lessons/test-it/golang-testing","prevSlug":"/ts-go-rust/lessons/config/questions"}},"__N_SSG":true}