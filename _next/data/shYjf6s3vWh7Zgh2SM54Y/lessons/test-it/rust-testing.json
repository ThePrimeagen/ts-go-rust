{"pageProps":{"post":{"attributes":{"title":"Rust : Projector Tests","description":"Lets test this bad boi"},"html":"<h3 id=\"wanna-guess-how-i-feel-about-rust-testing\">Wanna guess how i feel about rust testing?</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"fantastic\">Fantastic</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"here-is-the-code\">Here is the code!</h3>\n<pre><code class=\"hljs language-rust\">\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test {\n    <span class=\"hljs-keyword\">use</span> anyhow::<span class=\"hljs-type\">Result</span>;\n\n    <span class=\"hljs-keyword\">use</span> crate::{opts::CLIOptions, config::Operation};\n\n    <span class=\"hljs-keyword\">use</span> super::get_projector_config;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_print</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;()&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">opts</span> = CLIOptions {\n            config: <span class=\"hljs-literal\">None</span>,\n            pwd: <span class=\"hljs-literal\">None</span>,\n            arguments: <span class=\"hljs-built_in\">vec!</span>[],\n        };\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">config</span> = <span class=\"hljs-title function_ invoke__\">get_projector_config</span>(opts)?;\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(config.operation, Operation::<span class=\"hljs-title function_ invoke__\">Print</span>(<span class=\"hljs-literal\">None</span>));\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(());\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_add</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;()&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">opts</span> = CLIOptions {\n            config: <span class=\"hljs-literal\">None</span>,\n            pwd: <span class=\"hljs-literal\">None</span>,\n            arguments: <span class=\"hljs-built_in\">vec!</span>[\n                <span class=\"hljs-string\">&quot;add&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;foo&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>(), String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;bar&quot;</span>)\n            ],\n        };\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">config</span> = <span class=\"hljs-title function_ invoke__\">get_projector_config</span>(opts)?;\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(config.operation, Operation::<span class=\"hljs-title function_ invoke__\">Add</span>((String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>), String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;bar&quot;</span>))));\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(());\n    }\n}\n</code></pre>\n","slug":"rust-testing","title":"Rust : Projector Tests","section":"Test It","icon":"info-circle","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/06-test-it/C-rust-testing.md","nextSlug":"/ts-go-rust/lessons/test-it/thoughts","prevSlug":"/ts-go-rust/lessons/test-it/golang-testing"}},"__N_SSG":true}