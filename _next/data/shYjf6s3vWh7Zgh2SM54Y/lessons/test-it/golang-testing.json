{"pageProps":{"post":{"attributes":{"title":"Golang : Projector Tests","description":"Lets test this bad boi"},"html":"<h3 id=\"tests-you-are-likely-not-familiar-with\">Tests you are likely not familiar with</h3>\n<p>There are some libraries you can use with golang to make this nicer, but real\ntalk, go testing sucks.</p>\n<pre><code class=\"hljs language-bash\">go get -u github.com/google/go-cmp/cmp\n</code></pre>\n<pre><code class=\"hljs language-bash\">pkg/projector/config_test.go\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"your-code-could-look-like-this\">Your code could look like this!</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> projector_test\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;testing&quot;</span>\n\n    <span class=\"hljs-string\">&quot;github.com/theprimeagen/go-tem/pkg/projector&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestConfigPrint</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    opts := projector.CLIOptions {\n        Config: <span class=\"hljs-string\">&quot;&quot;</span>,\n        Pwd: <span class=\"hljs-string\">&quot;&quot;</span>,\n        Arguments: []<span class=\"hljs-type\">string</span>{},\n    }\n\n    config, err := projector.NewProjectorConfig(&amp;opts)\n\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        t.Errorf(<span class=\"hljs-string\">&quot;error returned from projector config %v&quot;</span>, err)\n    }\n\n    <span class=\"hljs-keyword\">if</span> config.Operation != projector.Print {\n        t.Errorf(<span class=\"hljs-string\">&quot;operation expected was print but got %v&quot;</span>, config.Operation)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestConfigAdd</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    opts := projector.CLIOptions {\n        Config: <span class=\"hljs-string\">&quot;&quot;</span>,\n        Pwd: <span class=\"hljs-string\">&quot;&quot;</span>,\n        Arguments: []<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">&quot;add&quot;</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>},\n    }\n\n    config, err := projector.NewProjectorConfig(&amp;opts)\n\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        t.Errorf(<span class=\"hljs-string\">&quot;error returned from projector config %v&quot;</span>, err)\n    }\n\n    <span class=\"hljs-keyword\">if</span> config.Operation != projector.Add {\n        t.Errorf(<span class=\"hljs-string\">&quot;operation expected was add but got %v&quot;</span>, config.Operation)\n    }\n\n    <span class=\"hljs-keyword\">if</span> config.Arguments[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-string\">&quot;foo&quot;</span> || config.Arguments[<span class=\"hljs-number\">1</span>] != <span class=\"hljs-string\">&quot;bar&quot;</span> {\n        t.Errorf(<span class=\"hljs-string\">&quot;expected arguments to equal {&#x27;foo&#x27;, &#x27;bar&#x27;} but got %+v&quot;</span>, config.Arguments)\n    }\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"time-for-the-greatest\">Time for the greatest..</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n","slug":"golang-testing","title":"Golang : Projector Tests","section":"Test It","icon":"info-circle","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/06-test-it/B-golang-testing.md","nextSlug":"/ts-go-rust/lessons/test-it/rust-testing","prevSlug":"/ts-go-rust/lessons/test-it/typescript-testing"}},"__N_SSG":true}