{"pageProps":{"post":{"attributes":{"title":"TypeScript : Projector Object","description":"The projector object will contain the operations"},"html":"<h3 id=\"the-problem-again\">The problem (again)</h3>\n<pre><code>   +----------+    +----------+\n   | cli opts | -&gt; | project  | -+-&gt;\n   |  (done)  |    |  config  |  |\n   +----------+    +----------+  |\n                                 |\n                                 +-&gt;\n                                 |\n                                 |\n                                 |\n                                 +-&gt;\n\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"interested-in-go-vs-typescript\">Interested in go vs typescript</h4>\n<p>If you are curious <a href=\"https://www.youtube.com/watch?v=h7UEwBaGoVo\">Go - TS</a>.\nWith rust included! <a href=\"https://www.youtube.com/watch?v=Z0GX2mTUtfo\">TS - Go - Rust</a>.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"lets-build-the-projector-object\">Lets build the Projector object</h3>\n<pre><code class=\"hljs language-bash\">src/projector/config.go\n</code></pre>\n<p>LETS BUILD!!!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"the-code\">The code!</h4>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> projector\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;os&quot;</span>\n    <span class=\"hljs-string\">&quot;path&quot;</span>\n)\n\n<span class=\"hljs-keyword\">type</span> Operation = <span class=\"hljs-type\">int</span>\n\n<span class=\"hljs-keyword\">const</span> (\n    Print Operation = <span class=\"hljs-literal\">iota</span>\n    Add\n    Remove\n)\n\n<span class=\"hljs-keyword\">type</span> ProjectorConfig <span class=\"hljs-keyword\">struct</span> {\n    Pwd <span class=\"hljs-type\">string</span> <span class=\"hljs-comment\">// projector --pwd ...</span>\n    Config <span class=\"hljs-type\">string</span> <span class=\"hljs-comment\">// projector --config ...</span>\n    Operation Operation <span class=\"hljs-comment\">// print, add, remove</span>\n    Arguments []<span class=\"hljs-type\">string</span> <span class=\"hljs-comment\">// &lt;key&gt;*, &lt;key&gt; &lt;value&gt;, &lt;key&gt;</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getConfig</span><span class=\"hljs-params\">(config <span class=\"hljs-type\">string</span>)</span></span> (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\n    <span class=\"hljs-keyword\">if</span> config == <span class=\"hljs-string\">&quot;&quot;</span> {\n        configDir, err := os.UserConfigDir()\n        <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, err\n        }\n\n        <span class=\"hljs-keyword\">return</span> path.Join(configDir, <span class=\"hljs-string\">&quot;projector&quot;</span>, <span class=\"hljs-string\">&quot;projector.json&quot;</span>), <span class=\"hljs-literal\">nil</span>\n    }\n\n    <span class=\"hljs-keyword\">return</span> config, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getPwd</span><span class=\"hljs-params\">(pwd <span class=\"hljs-type\">string</span>)</span></span> (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\n    <span class=\"hljs-keyword\">if</span> pwd == <span class=\"hljs-string\">&quot;&quot;</span> {\n        wd, err := os.Getwd()\n        <span class=\"hljs-keyword\">return</span> wd, err\n    }\n\n    <span class=\"hljs-keyword\">return</span> pwd, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isOperationCommand</span><span class=\"hljs-params\">(op <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> {\n    <span class=\"hljs-keyword\">return</span> op == <span class=\"hljs-string\">&quot;add&quot;</span> || op == <span class=\"hljs-string\">&quot;rm&quot;</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getArguments</span><span class=\"hljs-params\">(commands []<span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">string</span> {\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(commands) &gt; <span class=\"hljs-number\">0</span> &amp;&amp; isOperationCommand(commands[<span class=\"hljs-number\">0</span>])) {\n        <span class=\"hljs-keyword\">return</span> commands[<span class=\"hljs-number\">1</span>:]\n    }\n\n    <span class=\"hljs-keyword\">return</span> commands\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getOperation</span><span class=\"hljs-params\">(commands []<span class=\"hljs-type\">string</span>)</span></span> Operation {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(commands) == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">return</span> Add\n    }\n\n    <span class=\"hljs-keyword\">switch</span> (commands[<span class=\"hljs-number\">0</span>]) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;add&quot;</span>: <span class=\"hljs-keyword\">return</span> Add\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;rm&quot;</span>: <span class=\"hljs-keyword\">return</span> Remove\n    }\n    <span class=\"hljs-keyword\">return</span> Print\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewProjectorConfig</span><span class=\"hljs-params\">(opts *ProjectorOpts)</span></span> (*ProjectorConfig, <span class=\"hljs-type\">error</span>) {\n    pwd, err := getPwd(opts.Pwd)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n    }\n\n    config, err := getConfig(opts.Config)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n    }\n\n    <span class=\"hljs-keyword\">return</span> &amp;ProjectorConfig {\n        Operation: getOperation(opts.Arguments),\n        Arguments: getArguments(opts.Arguments),\n        Pwd: pwd,\n        Config: config,\n    }, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"onto-the-lords-language\">Onto the Lords language</h3>\n<p>no i am not talking about Php</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n","slug":"golang-projector-object","title":"TypeScript : Projector Object","section":"The Projector object","icon":"dumpster-fire","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/05-config/B-golang-projector-object.md","nextSlug":"/ts-go-rust/lessons/config/rust-projector-object","prevSlug":"/ts-go-rust/lessons/config/typescript-projector-object"}},"__N_SSG":true}