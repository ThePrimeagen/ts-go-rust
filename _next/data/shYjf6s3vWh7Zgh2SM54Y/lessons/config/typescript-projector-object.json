{"pageProps":{"post":{"attributes":{"title":"TypeScript : Projector Object","description":"The projector object will contain the operations"},"html":"<h3 id=\"breaking-the-problem-up\">Breaking the problem up</h3>\n<pre><code>   2.  Converting the options into something that we can use to\n       get everything we need to make projector\n\n   +----------+    +----------+\n   | cli opts | -&gt; | project  | -+-&gt;\n   |  (done)  |    |  config  |  |\n   +----------+    +----------+  |\n                                 |\n                                 +-&gt;\n                                 |\n                                 |\n                                 |\n                                 +-&gt;\n\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"i-am-going-to-use-classes\">I am going to use classes</h3>\n<p>I know there are a lot of you out there that will be horrified as you were told\nto never use classes.</p>\n<h4 id=\"fun-side-note\">Fun Side Note</h4>\n<p>If you use classes you can greatly improve the performance javascript using\nmanaged memory techniques that are not available with other techniques.  Alas,\nthat can be for another time.</p>\n<p>If you are curious <a href=\"https://www.youtube.com/watch?v=Sp5_d6coiqU\">Blazingly Fast JavaScript</a>.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"so-lets-go-over-what-we-need\">So lets go over what we need</h3>\n<p>What do we have right now?  We have a possible pwd, config path, and terms.  We\nneed to take these and create them into something useful.</p>\n<ul>\n<li>config should point to a config.  This means if none is provided we need a\ndefault location.</li>\n<li>pwd is either provided, or the cwd from the point of execution.</li>\n<li>terms.  This needs to be converted into two things.<ul>\n<li>Operation : the type of operation to perform (print, add, remove)</li>\n<li>Arguments : the arguments to the operation.</li>\n</ul>\n</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"lets-build-the-projector-object\">Lets build the Projector object</h3>\n<pre><code class=\"hljs language-bash\">src/config.ts\n</code></pre>\n<p>LETS BUILD!!!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"here-is-the-likely-very-similar-code\">Here is the likely very similar code</h4>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;path&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ProjectorOpts</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./opts&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Operation</span> {\n    <span class=\"hljs-title class_\">Print</span>,\n    <span class=\"hljs-title class_\">Add</span>,\n    <span class=\"hljs-title class_\">Remove</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ProjectorConfig</span> = {\n    <span class=\"hljs-attr\">pwd</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">config</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">operation</span>: <span class=\"hljs-title class_\">Operation</span>;\n    <span class=\"hljs-attr\">arguments</span>: <span class=\"hljs-built_in\">string</span>[];\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isOperationCommand</span>(<span class=\"hljs-params\">op?: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">boolean</span> {\n    <span class=\"hljs-keyword\">return</span> op === <span class=\"hljs-string\">&quot;add&quot;</span> || op === <span class=\"hljs-string\">&quot;rm&quot;</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getTerms</span>(<span class=\"hljs-params\">args: ProjectorOpts</span>): <span class=\"hljs-built_in\">string</span>[] {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isOperationCommand</span>(args.<span class=\"hljs-property\">arguments</span>?.[<span class=\"hljs-number\">0</span>])) {\n        <span class=\"hljs-keyword\">return</span> args.<span class=\"hljs-property\">arguments</span>?.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>) || [];\n    }\n\n    <span class=\"hljs-keyword\">return</span> args.<span class=\"hljs-property\">arguments</span> || [];\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getOperation</span>(<span class=\"hljs-params\">args: ProjectorOpts</span>): <span class=\"hljs-title class_\">Operation</span> {\n    <span class=\"hljs-keyword\">switch</span> (args.<span class=\"hljs-property\">arguments</span>?.[<span class=\"hljs-number\">0</span>]) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;add&quot;</span>: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Operation</span>.<span class=\"hljs-property\">Add</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;rm&quot;</span>: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Operation</span>.<span class=\"hljs-property\">Remove</span>;\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Operation</span>.<span class=\"hljs-property\">Print</span>;\n    }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getConfig</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">XDG_CONFIG_HOME</span>, <span class=\"hljs-string\">&quot;projector&quot;</span>, <span class=\"hljs-string\">&quot;projector.json&quot;</span>);\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">projector</span>(<span class=\"hljs-params\">opts: ProjectorOpts</span>): <span class=\"hljs-title class_\">Projector</span> {\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">pwd</span>: opts.<span class=\"hljs-property\">pwd</span> || process.<span class=\"hljs-title function_\">cwd</span>(),\n        <span class=\"hljs-attr\">config</span>: opts.<span class=\"hljs-property\">config</span> || <span class=\"hljs-title function_\">getConfig</span>(),\n        <span class=\"hljs-attr\">operation</span>: <span class=\"hljs-title function_\">getOperation</span>(opts),\n        <span class=\"hljs-attr\">arguments</span>: <span class=\"hljs-title function_\">getTerms</span>(opts),\n    };\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n","slug":"typescript-projector-object","title":"TypeScript : Projector Object","section":"The Projector object","icon":"dumpster-fire","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/05-config/A-typescript-projector-object.md","nextSlug":"/ts-go-rust/lessons/config/golang-projector-object","prevSlug":"/ts-go-rust/lessons/cli/discuss"}},"__N_SSG":true}