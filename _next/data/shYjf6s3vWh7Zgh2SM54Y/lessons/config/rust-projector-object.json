{"pageProps":{"post":{"attributes":{"title":"Rust : Projector Object","description":"The greatest language ever created by man"},"html":"<h3 id=\"do-you-really-need-to-see-this\">Do you really need to see this?</h3>\n<pre><code>   +----------+    +----------+\n   | cli opts | -&gt; | project  | -+-&gt;\n   |  (done)  |    |  config  |  |\n   +----------+    +----------+  |\n                                 |\n                                 +-&gt;\n                                 |\n                                 |\n                                 |\n                                 +-&gt;\n\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"we-may-not-be-doing-this-the-canonical-way-but-its-the-fun-way\">We may not be doing this the canonical way, but its the fun way</h4>\n<p>We are going to do this a bit weird, but I think its fantastic.  It will really\nshow you the power of the trait system.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"lets-build-the-projector-object\">Lets build the Projector object</h3>\n<pre><code class=\"hljs language-bash\">src/projector/config.go\n</code></pre>\n<p>LETS BUILD!!!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"the-code\">The code!</h4>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> std::path::PathBuf;\n\n<span class=\"hljs-keyword\">use</span> crate::opts::CLIOptions;\n<span class=\"hljs-keyword\">use</span> anyhow::{<span class=\"hljs-type\">Result</span>, anyhow, Context};\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Operation</span> {\n    <span class=\"hljs-title function_ invoke__\">Print</span>(<span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">String</span>&gt;),\n    <span class=\"hljs-title function_ invoke__\">Add</span>((<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">String</span>)),\n    <span class=\"hljs-title function_ invoke__\">Remove</span>(<span class=\"hljs-type\">String</span>),\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">ProjectorConfig</span> {\n    <span class=\"hljs-keyword\">pub</span> operation: Operation,\n    <span class=\"hljs-keyword\">pub</span> config: PathBuf,\n    <span class=\"hljs-keyword\">pub</span> pwd: PathBuf,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">TryFrom</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">String</span>&gt;&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Operation</span> {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Error</span> = anyhow::Error;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">try_from</span>(<span class=\"hljs-keyword\">mut</span> value: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">String</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;<span class=\"hljs-keyword\">Self</span>, <span class=\"hljs-keyword\">Self</span>::Error&gt; {\n        <span class=\"hljs-keyword\">if</span> value.<span class=\"hljs-title function_ invoke__\">len</span>() == <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(Operation::<span class=\"hljs-title function_ invoke__\">Print</span>(<span class=\"hljs-literal\">None</span>));\n        }\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">term</span> = value.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n\n        <span class=\"hljs-keyword\">if</span> term == <span class=\"hljs-string\">&quot;add&quot;</span> {\n            <span class=\"hljs-keyword\">if</span> value.<span class=\"hljs-title function_ invoke__\">len</span>() != <span class=\"hljs-number\">3</span> {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(anyhow!(<span class=\"hljs-string\">&quot;expected 2 arguments but you provided {}&quot;</span>, value.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span>));\n            }\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">drain</span> = value.<span class=\"hljs-title function_ invoke__\">drain</span>(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">2</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(Operation::<span class=\"hljs-title function_ invoke__\">Add</span>((drain.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), drain.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>())));\n        }\n\n        <span class=\"hljs-keyword\">if</span> term == <span class=\"hljs-string\">&quot;rm&quot;</span> {\n            <span class=\"hljs-keyword\">if</span> value.<span class=\"hljs-title function_ invoke__\">len</span>() != <span class=\"hljs-number\">2</span> {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(anyhow!(<span class=\"hljs-string\">&quot;expected 1 arguments but you provided {}&quot;</span>, value.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span>));\n            }\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">drain</span> = value.<span class=\"hljs-title function_ invoke__\">drain</span>(<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">2</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(Operation::<span class=\"hljs-title function_ invoke__\">Remove</span>(drain.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>()));\n        }\n\n        <span class=\"hljs-keyword\">if</span> value.<span class=\"hljs-title function_ invoke__\">len</span>() != <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(anyhow!(<span class=\"hljs-string\">&quot;expected 0 or 1 arguments but you provided {}&quot;</span>, value.<span class=\"hljs-title function_ invoke__\">len</span>()));\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(Operation::<span class=\"hljs-title function_ invoke__\">Print</span>(<span class=\"hljs-title function_ invoke__\">Some</span>(term.<span class=\"hljs-title function_ invoke__\">clone</span>())));\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_config</span>(config: <span class=\"hljs-type\">Option</span>&lt;PathBuf&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;PathBuf&gt; {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(c) = config {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(c);\n    }\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Ok</span>(home) = std::env::<span class=\"hljs-title function_ invoke__\">var</span>(<span class=\"hljs-string\">&quot;XDG_CONFIG_HOME&quot;</span>) {\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">home</span> = PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(home);\n        home.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-string\">&quot;projector&quot;</span>);\n        home.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-string\">&quot;projector.json&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(home);\n    }\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Ok</span>(home) = std::env::<span class=\"hljs-title function_ invoke__\">var</span>(<span class=\"hljs-string\">&quot;HOME&quot;</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">home</span> = PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(home);\n        home.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-string\">&quot;projector&quot;</span>);\n        home.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-string\">&quot;projector.json&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(home);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(anyhow!(<span class=\"hljs-string\">&quot;unable to find config location&quot;</span>));\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_pwd</span>(pwd: <span class=\"hljs-type\">Option</span>&lt;PathBuf&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;PathBuf&gt; {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(p) = pwd {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(p);\n    }\n\n    <span class=\"hljs-keyword\">return</span> std::env::<span class=\"hljs-title function_ invoke__\">current_dir</span>().<span class=\"hljs-title function_ invoke__\">context</span>(<span class=\"hljs-string\">&quot;unable to get std::env::current_dir&quot;</span>);\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_projector_config</span>(opts: CLIOptions) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;ProjectorConfig&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(ProjectorConfig {\n        operation: opts.arguments.<span class=\"hljs-title function_ invoke__\">try_into</span>()?,\n        config: <span class=\"hljs-title function_ invoke__\">get_config</span>(opts.config)?,\n        pwd: <span class=\"hljs-title function_ invoke__\">get_pwd</span>(opts.pwd)?,\n    });\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n","slug":"rust-projector-object","title":"Rust : Projector Object","section":"The Projector object","icon":"dumpster-fire","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/05-config/C-rust-projector-object.md","nextSlug":"/ts-go-rust/lessons/config/questions","prevSlug":"/ts-go-rust/lessons/config/golang-projector-object"}},"__N_SSG":true}