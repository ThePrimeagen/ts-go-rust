{"pageProps":{"post":{"attributes":{"title":"Rustlang projector","description":"Gophers be damned"},"html":"<h3 id=\"the-real-language-doing-the-real-work\">The real language, doing the real work</h3>\n<p>Lets get rusty</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"the-ascii-diagram-again\">The ascii diagram again.</h3>\n<pre><code>                                 v &lt;-- you are here (still)\n                                                    (but now you are a rustacean)\n   +----------+    +----------+      +----------+    +----------+\n   | cli opts | -&gt; | project  | -+-&gt; |  print   | -&gt; | display  |\n   +----------+    |  config  |  |   +----------+    +----------+\n                   +----------+  |\n                                 |   +----------+    +----------+\n                                 +-&gt; |   add    | -&gt; |   save   |\n                                 |   +----------+    +----------+\n                                 |\n                                 |   +----------+    +----------+\n                                 +-&gt; |    rm    | -&gt; |   save   |\n                                     +----------+    +----------+\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"so-lets-create-the-file-srcprojectorrs\">So lets create the file (src/projector.rs)</h3>\n<pre><code class=\"hljs language-bash\">&gt; src/projector.rs\n</code></pre>\n<p>RUST IT UP</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"here-is-what-the-code-could-look-like\">Here is what the code could look like</h3>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> std::{collections::HashMap, path::PathBuf};\n<span class=\"hljs-keyword\">use</span> serde::{Deserialize, Serialize};\n<span class=\"hljs-keyword\">use</span> crate::config::ProjectorConfig;\n\n<span class=\"hljs-meta\">#[derive(Debug, Default, Deserialize, Serialize)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">ProjectorData</span> {\n    projector: HashMap&lt;PathBuf, HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">String</span>&gt;&gt;\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Projector</span> {\n    config: ProjectorConfig,\n    data: ProjectorData,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default_projector</span>(config: ProjectorConfig) <span class=\"hljs-punctuation\">-&gt;</span> Projector {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">data</span> = ProjectorData::<span class=\"hljs-title function_ invoke__\">default</span>();\n    <span class=\"hljs-keyword\">return</span> Projector {\n        config,\n        data,\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">From</span>&lt;ProjectorConfig&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Projector</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">from</span>(config: ProjectorConfig) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">if</span> std::fs::<span class=\"hljs-title function_ invoke__\">metadata</span>(&amp;config.config).<span class=\"hljs-title function_ invoke__\">is_err</span>() {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">default_projector</span>(config);\n        }\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Ok</span>(data) = std::fs::<span class=\"hljs-title function_ invoke__\">read_to_string</span>(&amp;config.config) {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">data</span> = serde_json::<span class=\"hljs-title function_ invoke__\">from_str</span>(&amp;data);\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Ok</span>(data) = data {\n                <span class=\"hljs-keyword\">return</span> Projector {\n                    config,\n                    data,\n                }\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">default_projector</span>(config);\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Projector</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_value</span>(&amp;<span class=\"hljs-keyword\">self</span>, key: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;<span class=\"hljs-type\">String</span>&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">out</span> = <span class=\"hljs-literal\">None</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">curr</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">self</span>.config.pwd.<span class=\"hljs-title function_ invoke__\">as_path</span>());\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(p) = curr {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(dir) = <span class=\"hljs-keyword\">self</span>.data.projector.<span class=\"hljs-title function_ invoke__\">get</span>(p) {\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">value</span> = dir.<span class=\"hljs-title function_ invoke__\">get</span>(key);\n                <span class=\"hljs-keyword\">if</span> value.<span class=\"hljs-title function_ invoke__\">is_some</span>() {\n                    out = value;\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n            curr = p.<span class=\"hljs-title function_ invoke__\">parent</span>();\n        }\n\n        <span class=\"hljs-keyword\">return</span> out;\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">set_value</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, key: &amp;<span class=\"hljs-type\">str</span>, value: <span class=\"hljs-type\">String</span>) {\n        <span class=\"hljs-keyword\">self</span>.data.projector\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(<span class=\"hljs-keyword\">self</span>.config.pwd.<span class=\"hljs-title function_ invoke__\">clone</span>())\n            .<span class=\"hljs-title function_ invoke__\">or_insert_with</span>(|| HashMap::<span class=\"hljs-title function_ invoke__\">new</span>())\n            .<span class=\"hljs-title function_ invoke__\">insert</span>(key.<span class=\"hljs-title function_ invoke__\">to_string</span>(), value);\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_value</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, key: &amp;<span class=\"hljs-type\">str</span>) {\n        <span class=\"hljs-keyword\">self</span>.data.projector\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(<span class=\"hljs-keyword\">self</span>.config.pwd.<span class=\"hljs-title function_ invoke__\">clone</span>())\n            .<span class=\"hljs-title function_ invoke__\">or_insert_with</span>(|| HashMap::<span class=\"hljs-title function_ invoke__\">new</span>())\n            .<span class=\"hljs-title function_ invoke__\">remove</span>(key);\n    }\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"forgot-the-anniversary\">Forgot the anniversary?</h3>\n<p>Testing Time</p>\n<pre><code class=\"hljs language-bash\">cargo add collection_macros\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"your-tests-could-look-like\">Your tests could look like</h3>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test {\n    <span class=\"hljs-keyword\">use</span> std::{path::PathBuf, collections::HashMap};\n\n    <span class=\"hljs-keyword\">use</span> collection_macros::hashmap;\n\n    <span class=\"hljs-keyword\">use</span> crate::config::{ProjectorConfig, Operation};\n\n    <span class=\"hljs-keyword\">use</span> super::{ProjectorData, Projector};\n\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_config</span>(pwd: PathBuf) <span class=\"hljs-punctuation\">-&gt;</span> ProjectorConfig {\n        <span class=\"hljs-keyword\">return</span> ProjectorConfig {\n            config: PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;/foo&quot;</span>),\n            operation: Operation::<span class=\"hljs-title function_ invoke__\">Print</span>(<span class=\"hljs-literal\">None</span>),\n            pwd,\n        }\n    }\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_data</span>() <span class=\"hljs-punctuation\">-&gt;</span> ProjectorData {\n        <span class=\"hljs-keyword\">return</span> ProjectorData {\n            projector: hashmap! {\n                PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;/&quot;</span>) =&gt; hashmap! {\n                    <span class=\"hljs-string\">&quot;foo&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>() =&gt; <span class=\"hljs-string\">&quot;bar1&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>(),\n                    <span class=\"hljs-string\">&quot;bar&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>() =&gt; <span class=\"hljs-string\">&quot;bazz&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>(),\n                },\n                PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;/foo&quot;</span>) =&gt; hashmap! {\n                    <span class=\"hljs-string\">&quot;foo&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>() =&gt; <span class=\"hljs-string\">&quot;bar2&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>()\n                },\n                PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;/foo/bar&quot;</span>) =&gt; hashmap! {\n                    <span class=\"hljs-string\">&quot;foo&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>() =&gt; <span class=\"hljs-string\">&quot;bar3&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>()\n                },\n                PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;/foo/bar/baz&quot;</span>) =&gt; hashmap! {\n                    <span class=\"hljs-string\">&quot;foo&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>() =&gt; <span class=\"hljs-string\">&quot;bar3&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>()\n                },\n            },\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_value</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">proj</span> = Projector {\n            data: <span class=\"hljs-title function_ invoke__\">get_data</span>(),\n            config: <span class=\"hljs-title function_ invoke__\">get_config</span>(PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;/foo/bar&quot;</span>)),\n        };\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(proj.<span class=\"hljs-title function_ invoke__\">get_value</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;bar3&quot;</span>)));\n        <span class=\"hljs-built_in\">assert_eq!</span>(proj.<span class=\"hljs-title function_ invoke__\">get_value</span>(<span class=\"hljs-string\">&quot;bar&quot;</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;bazz&quot;</span>)));\n        <span class=\"hljs-built_in\">assert_eq!</span>(proj.<span class=\"hljs-title function_ invoke__\">get_value</span>(<span class=\"hljs-string\">&quot;notehu&quot;</span>), <span class=\"hljs-literal\">None</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">set_value</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">proj</span> = Projector {\n            data: <span class=\"hljs-title function_ invoke__\">get_data</span>(),\n            config: <span class=\"hljs-title function_ invoke__\">get_config</span>(PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;/foo/bar&quot;</span>)),\n        };\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(proj.<span class=\"hljs-title function_ invoke__\">get_value</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;bar3&quot;</span>)));\n        proj.<span class=\"hljs-title function_ invoke__\">set_value</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;hello, fem&quot;</span>.<span class=\"hljs-title function_ invoke__\">into</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(proj.<span class=\"hljs-title function_ invoke__\">get_value</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;hello, fem&quot;</span>)));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">delete_value</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">proj</span> = Projector {\n            data: <span class=\"hljs-title function_ invoke__\">get_data</span>(),\n            config: <span class=\"hljs-title function_ invoke__\">get_config</span>(PathBuf::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;/foo/bar&quot;</span>)),\n        };\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(proj.<span class=\"hljs-title function_ invoke__\">get_value</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;bar3&quot;</span>)));\n        proj.<span class=\"hljs-title function_ invoke__\">delete_value</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(proj.<span class=\"hljs-title function_ invoke__\">get_value</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>), <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;bar2&quot;</span>)));\n    }\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"onto-victory\">ONTO VICTORY!!!</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n","slug":"rust-project","title":"Rustlang projector","section":"The Projector object","icon":"dumpster-fire","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/07-projector/C-rust-project.md","nextSlug":"/ts-go-rust/lessons/projector/discussion-time","prevSlug":"/ts-go-rust/lessons/projector/golang-projector"}},"__N_SSG":true}