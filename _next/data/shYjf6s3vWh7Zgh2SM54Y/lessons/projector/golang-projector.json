{"pageProps":{"post":{"attributes":{"title":"Golang Projector","description":"Now its time to unleash the inner gopher"},"html":"<h3 id=\"we-are-entering-into-the-actual-project-part\">We are entering into the actual project part</h3>\n<p>So now its time to do the actual application programming.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"the-ascii-diagram-again\">The ascii diagram again.</h3>\n<pre><code>                                 v &lt;-- you are here (still)\n                                                    (but now you are a gopher)\n   +----------+    +----------+      +----------+    +----------+\n   | cli opts | -&gt; | project  | -+-&gt; |  print   | -&gt; | display  |\n   +----------+    |  config  |  |   +----------+    +----------+\n                   +----------+  |\n                                 |   +----------+    +----------+\n                                 +-&gt; |   add    | -&gt; |   save   |\n                                 |   +----------+    +----------+\n                                 |\n                                 |   +----------+    +----------+\n                                 +-&gt; |    rm    | -&gt; |   save   |\n                                     +----------+    +----------+\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"so-lets-create-the-file-pkgprojectorprojectorgo\">So lets create the file (pkg/projector/projector.go)</h3>\n<pre><code class=\"hljs language-bash\">&gt; pkg/projector/projector.go\n</code></pre>\n<p>GOPHER TIME</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"here-is-what-the-code-could-look-like\">Here is what the code could look like</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> projector\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;encoding/json&quot;</span>\n    <span class=\"hljs-string\">&quot;os&quot;</span>\n    <span class=\"hljs-string\">&quot;path&quot;</span>\n)\n\n<span class=\"hljs-keyword\">type</span> Lookup = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>\n<span class=\"hljs-keyword\">type</span> ProjectorData <span class=\"hljs-keyword\">struct</span> {\n    Projector Lookup <span class=\"hljs-string\">`json:&quot;projector&quot;`</span>\n}\n\n<span class=\"hljs-keyword\">type</span> Projector <span class=\"hljs-keyword\">struct</span> {\n    data   ProjectorData\n    config *ProjectorConfig\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Projector)</span></span> GetValue(key <span class=\"hljs-type\">string</span>) (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">bool</span>) {\n    found := <span class=\"hljs-literal\">false</span>\n    out := <span class=\"hljs-string\">&quot;&quot;</span>\n\n    curr := p.config.Pwd\n    prev := <span class=\"hljs-string\">&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">for</span> {\n\n        <span class=\"hljs-keyword\">if</span> dir, prs := p.data.Projector[curr]; prs {\n            <span class=\"hljs-keyword\">if</span> value, prs := dir[key]; prs {\n                found = <span class=\"hljs-literal\">true</span>\n                out = value\n                <span class=\"hljs-keyword\">break</span>\n            }\n        }\n\n        <span class=\"hljs-keyword\">if</span> curr == prev {\n            <span class=\"hljs-keyword\">break</span>\n        }\n\n        prev = curr\n        curr = path.Dir(curr)\n    }\n\n    <span class=\"hljs-keyword\">return</span> out, found\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Projector)</span></span> SetValue(key <span class=\"hljs-type\">string</span>, value <span class=\"hljs-type\">string</span>) {\n    pwd := p.config.Pwd\n    <span class=\"hljs-keyword\">if</span> _, prs := p.data.Projector[pwd]; !prs {\n        p.data.Projector[pwd] = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>{}\n    }\n\n    p.data.Projector[pwd][key] = value\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Projector)</span></span> DeleteValue(key <span class=\"hljs-type\">string</span>) {\n    pwd := p.config.Pwd\n    <span class=\"hljs-keyword\">if</span> dir, prs := p.data.Projector[pwd]; prs {\n        <span class=\"hljs-built_in\">delete</span>(dir, key)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">defaultProjector</span><span class=\"hljs-params\">(config *ProjectorConfig)</span></span> *Projector {\n    <span class=\"hljs-keyword\">return</span> &amp;Projector{\n        config: config,\n        data:   ProjectorData{},\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FromConfig</span><span class=\"hljs-params\">(config *ProjectorConfig)</span></span> (*Projector, <span class=\"hljs-type\">error</span>) {\n    <span class=\"hljs-keyword\">if</span> _, err := os.Stat(config.Config); os.IsNotExist(err) {\n        <span class=\"hljs-keyword\">return</span> defaultProjector(config), <span class=\"hljs-literal\">nil</span>\n    }\n\n    bytes, err := os.ReadFile(config.Config)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> defaultProjector(config), <span class=\"hljs-literal\">nil</span>\n    }\n\n    <span class=\"hljs-keyword\">var</span> data ProjectorData\n    err = json.Unmarshal(bytes, &amp;data)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> defaultProjector(config), <span class=\"hljs-literal\">nil</span>\n    }\n    <span class=\"hljs-keyword\">return</span> &amp;Projector{\n        data,\n        config,\n    }, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"did-you-skip-leg-day\">Did you skip leg day?</h3>\n<p>Lets test</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"your-tests-could-look-like\">Your tests could look like</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> projector_test\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;testing&quot;</span>\n\n    <span class=\"hljs-string\">&quot;github.com/theprimeagen/go-tem/pkg/projector&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getData</span><span class=\"hljs-params\">()</span></span> *projector.ProjectorData {\n    <span class=\"hljs-keyword\">return</span> &amp;projector.ProjectorData{\n        Projector: <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>{\n            <span class=\"hljs-string\">&quot;/&quot;</span>: {\n                <span class=\"hljs-string\">&quot;bar&quot;</span>: <span class=\"hljs-string\">&quot;buzz&quot;</span>,\n                <span class=\"hljs-string\">&quot;foo&quot;</span>: <span class=\"hljs-string\">&quot;bar1&quot;</span>,\n            },\n            <span class=\"hljs-string\">&quot;/foo&quot;</span>: {\n                <span class=\"hljs-string\">&quot;foo&quot;</span>: <span class=\"hljs-string\">&quot;bar2&quot;</span>,\n            },\n            <span class=\"hljs-string\">&quot;/foo/bar&quot;</span>: {\n                <span class=\"hljs-string\">&quot;foo&quot;</span>: <span class=\"hljs-string\">&quot;bar3&quot;</span>,\n            },\n            <span class=\"hljs-string\">&quot;/foo/bar/baz&quot;</span>: {\n                <span class=\"hljs-string\">&quot;foo&quot;</span>: <span class=\"hljs-string\">&quot;bar4&quot;</span>,\n            },\n        },\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getConfig</span><span class=\"hljs-params\">(pwd <span class=\"hljs-type\">string</span>)</span></span> *projector.ProjectorConfig {\n    <span class=\"hljs-keyword\">return</span> &amp;projector.ProjectorConfig{\n        Pwd: pwd,\n        Config: <span class=\"hljs-string\">&quot;dnm&quot;</span>,\n        Operation: projector.Print,\n        Arguments: []<span class=\"hljs-type\">string</span>{},\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestGetValue</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    p := projector.NewProjector(getConfig(<span class=\"hljs-string\">&quot;/foo/bar&quot;</span>), getData())\n\n    val, ok := p.GetValue(<span class=\"hljs-string\">&quot;foo&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> !ok {\n        t.Error(<span class=\"hljs-string\">&quot;couldn&#x27;t find value&quot;</span>)\n    }\n\n    <span class=\"hljs-keyword\">if</span> val != <span class=\"hljs-string\">&quot;bar3&quot;</span> {\n        t.Errorf(<span class=\"hljs-string\">&quot;expected bar3 but got %v&quot;</span>, val)\n    }\n\n    _, ok = p.GetValue(<span class=\"hljs-string\">&quot;bazbar&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> ok {\n        t.Error(<span class=\"hljs-string\">&quot;expected to find no value&quot;</span>)\n    }\n\n\n    val, ok = p.GetValue(<span class=\"hljs-string\">&quot;bar&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> !ok {\n        t.Error(<span class=\"hljs-string\">&quot;couldn&#x27;t find value&quot;</span>)\n    }\n\n    <span class=\"hljs-keyword\">if</span> val != <span class=\"hljs-string\">&quot;buzz&quot;</span> {\n        t.Errorf(<span class=\"hljs-string\">&quot;expected buzz but got %v&quot;</span>, val)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestSetValue</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    p := projector.NewProjector(getConfig(<span class=\"hljs-string\">&quot;/foo/bar&quot;</span>), getData())\n    p.SetValue(<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar69&quot;</span>)\n    val, ok := p.GetValue(<span class=\"hljs-string\">&quot;foo&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> !ok {\n        t.Error(<span class=\"hljs-string\">&quot;couldn&#x27;t find value&quot;</span>)\n    }\n\n    <span class=\"hljs-keyword\">if</span> val != <span class=\"hljs-string\">&quot;bar69&quot;</span> {\n        t.Errorf(<span class=\"hljs-string\">&quot;expected bar69 but got %v&quot;</span>, val)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestRemoveValue</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    p := projector.NewProjector(getConfig(<span class=\"hljs-string\">&quot;/foo/bar&quot;</span>), getData())\n    p.DeleteValue(<span class=\"hljs-string\">&quot;foo&quot;</span>)\n    val, ok := p.GetValue(<span class=\"hljs-string\">&quot;foo&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> !ok {\n        t.Error(<span class=\"hljs-string\">&quot;couldn&#x27;t find value&quot;</span>)\n    }\n\n    <span class=\"hljs-keyword\">if</span> val != <span class=\"hljs-string\">&quot;bar2&quot;</span> {\n        t.Errorf(<span class=\"hljs-string\">&quot;expected bar2 but got %v&quot;</span>, val)\n    }\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"crab-people\">Crab people</h3>\n<p><img src=\"/ts-go-rust/./images/pust.png\" alt=\"Twitch\"></p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n","slug":"golang-projector","title":"Golang Projector","section":"The Projector object","icon":"dumpster-fire","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/07-projector/B-golang-projector.md","nextSlug":"/ts-go-rust/lessons/projector/rust-project","prevSlug":"/ts-go-rust/lessons/projector/typescript-projector"}},"__N_SSG":true}