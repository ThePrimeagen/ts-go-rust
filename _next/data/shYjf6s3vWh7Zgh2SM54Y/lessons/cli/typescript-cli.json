{"pageProps":{"post":{"attributes":{"title":"TypeScript : CLI","description":"Lets build the cli argument portion of the typescript program"},"html":"<h3 id=\"remember-breaking-the-problem-up\">REMEMBER: Breaking the problem up</h3>\n<pre><code>   1. Creating the CLI options.  These are things we can parse\n      from the command line interface.\n\n   +----------+\n   | cli opts | -&gt;\n   +----------+\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"typescript\">TypeScript</h3>\n<p>I am going to make some basic assumptions that everyone watching this is\nfamiliar with TypeScript and there are probably some of you out there that are\neven better than me at it.</p>\n<h3 id=\"cli-argument-parsing\">CLI Argument parsing</h3>\n<p>There is no reason why you cannot use any other argument parser.  I literally\nsaw about 15 of them and played a game of pick whichever one felt good in the\nmoment!</p>\n<ul>\n<li>NodeJS : command-line-args<ul>\n<li>simple, easy to use.</li>\n</ul>\n</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"lets-setup-our-project\">Lets setup our project</h3>\n<p>To make it easy, set it up any way you want.  Personally here is how my folder\nstructer will work.</p>\n<pre><code class=\"hljs language-bash\">~/projects/projector-typescript\n~/projects/projector-go\n~/projects/projector-rust\n</code></pre>\n<p>Reason being is that this will make it easiest for me to swap back and forth\nbetwixt the projects</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"i-use-tmux-btw\">I use tmux, btw</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"i-use-vim-btw\">I use vim, btw</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"i-use-dvorak-btw\">I use dvorak, btw</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"i-use-a-kinesis-360-btw\">I use a Kinesis 360, btw</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"so-to-get-started-lets-create-the-project\">So to get started lets create the project</h3>\n<p>Create it where you like</p>\n<pre><code class=\"hljs language-bash\">yarn init -y\nyarn add command-line-args @types/command-line-args\nyarn add ts-node typescript @types/node\ngit init\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;node_modules&quot;</span> &gt; .gitignore\n<span class=\"hljs-built_in\">mkdir</span> src\nvim . <span class=\"hljs-comment\"># you can open up other less awesome editors</span>\n</code></pre>\n<p>Yes, of course i am not going to setup a build to make this into an shebang&#39;d\nscript.</p>\n<h3 id=\"example-of-cli-wont-match-exactly\">Example of CLI (wont match exactly)</h3>\n<p>Here is an example i&#39;ll be putting under <code>src/opts.ts</code></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> cli <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;command-line-args&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ProjectorOptions</span> = {\n    pwd?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// projector --pwd ...</span>\n    config?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// projector --config ...</span>\n    <span class=\"hljs-variable language_\">arguments</span>?: <span class=\"hljs-built_in\">string</span>[];\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getOptions</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title class_\">ProjectorOptions</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">cli</span>([\n        { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;config&#x27;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span> },\n        { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;pwd&#x27;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span> },\n        { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;arguments&#x27;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>, <span class=\"hljs-attr\">defaultOption</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">multiple</span>: <span class=\"hljs-literal\">true</span> },\n    ]) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">ProjectorOptions</span>;\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"so-lets-build-it-again-but-in-go\">So lets build it again, but in Go!</h3>\n<p>This is what I think is very valuable.  You have a concrete idea of what we are\ndoing, now we do it in a language you are not familiar.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n","slug":"typescript-cli","title":"TypeScript : CLI","section":"The CLI Options","icon":"dumpster-fire","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/04-cli/A-typescript-cli.md","nextSlug":"/ts-go-rust/lessons/cli/golang-cli","prevSlug":"/ts-go-rust/lessons/the-project/questions"}},"__N_SSG":true}