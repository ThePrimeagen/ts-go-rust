{"pageProps":{"post":{"attributes":{"title":"Golang : CLI","description":"Lets build the cli argument portion of the golang program"},"html":"<h3 id=\"golang\">Golang</h3>\n<p>I am going to make a new assumption.  Most of you are not familiar with golang,\ntherefore I&#39;ll go a bit slower and I&#39;ll hop back to TypeScript regularly.</p>\n<h3 id=\"cli-argument-parsing\">CLI Argument parsing</h3>\n<p>There are some pretty dang powerful CLI arg parsers, thinking of urfave/cli.\nIts really awesome, but its just overkill for what we are doing here.  So I\npicked the simpliest one for our benefit</p>\n<ul>\n<li>Golang : github.com/hellflame/argparse<ul>\n<li>A really nice api on this one</li>\n</ul>\n</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"i-use-tmux-btw\">I use tmux, btw</h3>\n<p>Such fast swapping</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"i-use-vim-btw\">I use vim, btw</h3>\n<p>Such fast editing</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"i-use-dvorak-btw\">I use dvorak, btw</h3>\n<p>Such wrist non pain, but I also cannot use a coworkers computer...</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"before-we-get-started-lets-talk-ptrs\">Before we get started, lets talk ptrs</h3>\n<p>TO THE WHITE BOARD</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"so-to-get-started-lets-create-the-project\">So to get started lets create the project</h3>\n<p>Create it where you like</p>\n<pre><code class=\"hljs language-bash\">go mod init github.com/theprimeagen/projector\ngo get github.com/hellflame/argparse\n<span class=\"hljs-built_in\">mkdir</span> cmd\n<span class=\"hljs-built_in\">mkdir</span> -p pkg/cli\nvim . <span class=\"hljs-comment\"># you can open up other non coconut oil&#x27;d editors</span>\n</code></pre>\n<p>Oh, and there is no terrible build experience like there is with ts.</p>\n<h3 id=\"example-of-cli-options-pkgclioptsgo\">Example of CLI Options (pkg/cli/opts.go)</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> projector\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;github.com/hellflame/argparse&quot;</span>\n)\n\n<span class=\"hljs-keyword\">type</span> ProjectorOpts <span class=\"hljs-keyword\">struct</span> {\n    Pwd <span class=\"hljs-type\">string</span>\n    Config <span class=\"hljs-type\">string</span>\n    Arguments []<span class=\"hljs-type\">string</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetOptions</span><span class=\"hljs-params\">()</span></span> (*ProjectorOpts, <span class=\"hljs-type\">error</span>) {\n    parser := argparse.NewParser(<span class=\"hljs-string\">&quot;projector&quot;</span>, <span class=\"hljs-string\">&quot;gets all the values&quot;</span>, &amp;argparse.ParserConfig{DisableDefaultShowHelp: <span class=\"hljs-literal\">true</span>})\n    args := parser.Strings(<span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>, &amp;argparse.Option{\n        Positional: <span class=\"hljs-literal\">true</span>,\n        Default: <span class=\"hljs-string\">&quot;&quot;</span>,\n        Required: <span class=\"hljs-literal\">false</span>,\n    })\n\n    config := parser.String(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;config&quot;</span>, &amp;argparse.Option{Required: <span class=\"hljs-literal\">false</span>, Default: <span class=\"hljs-string\">&quot;&quot;</span>})\n    pwd := parser.String(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-string\">&quot;pwd&quot;</span>, &amp;argparse.Option{Required: <span class=\"hljs-literal\">false</span>, Default: <span class=\"hljs-string\">&quot;&quot;</span>})\n\n    err := parser.Parse(<span class=\"hljs-literal\">nil</span>)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n    }\n\n    <span class=\"hljs-keyword\">return</span> &amp;ProjectorOpts {\n        Pwd: *pwd,\n        Config: *config,\n        Arguments: *args,\n    }, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"so-lets-build-it-again-but-in-rust\">So lets build it again, but in Rust!!!</h3>\n<p>This is the exciting part!  We get to use rust just for a moment!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n\n","slug":"golang-cli","title":"Golang : CLI","section":"The CLI Options","icon":"dumpster-fire","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/04-cli/B-golang-cli.md","nextSlug":"/ts-go-rust/lessons/cli/rust-cli","prevSlug":"/ts-go-rust/lessons/cli/typescript-cli"}},"__N_SSG":true}