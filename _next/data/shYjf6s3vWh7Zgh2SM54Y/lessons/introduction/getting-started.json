{"pageProps":{"post":{"attributes":{},"html":"<h2 id=\"how-we-will-crush-such-great-feats\">How we will crush such great feats</h2>\n<p>We are going to be cruising through a small cli program that will help you be\nable to grasp these languages.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"before-we-begin-lets-take-a-quick-poll\">Before we begin, lets take a quick poll.</h3>\n<ul>\n<li>Who came here to learn rust, potentially better?</li>\n<li>How much rust do you know?</li>\n<li>Who came here to learn go, potentially better?</li>\n<li>How much go do you know?</li>\n<li>Who knows ts?</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"where-did-this-course-come-from\">Where did this course come from?</h2>\n<p>As I have mentioned i stream and make yt videos.  I get asked this question constantly.</p>\n<ul>\n<li>What should I learn next?</li>\n<li>How should I learn it?</li>\n<li>What should I build?</li>\n<li>Where do I start?</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"i-love-building-cli-apps\">I love building cli apps</h2>\n<p>They are a great way to get to learn the ecosystem.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"roadmap\">Roadmap</h2>\n<h3 id=\"part-1--getting-familiar\">Part 1 : Getting familiar</h3>\n<p>Go and its simplicity<br />\nRust and its complexity<br />\nTesting in each language<br />\nStrategies of testing<br /></p>\n<br />\n\n<h3 id=\"part-2--first-look\">Part 2 : First look</h3>\n<p>Some basics about each language + some simple string parsing problems.  This\nwill help us just get acquainted with each language.</p>\n<br />\n\n<h3 id=\"part-3--cli-application---parsing-command-line-arguments\">Part 3 : CLI Application - Parsing command line arguments</h3>\n<p>We will start the cli program the best way we can, CLI arguments.  This is\nwhere the rubber will meet the road.</p>\n<br />\n\n<h3 id=\"part-4--building-the-core-of-the-program\">Part 4 : Building the core of the program</h3>\n<p>The operations our program needs to perform.</p>\n<br />\n\n<h3 id=\"part-7--conclusion\">Part 7 : Conclusion</h3>\n<p>Where to go next</p>\n<br />\n\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"my-one-regret\">My One Regret</h2>\n<p>The hardest part about making this talk is that there isnt going to be\nconcurrency.  Which means we don&#39;t get the opportunity to explore go routines\nand tokio tears.  This is where Golang will quickly become your most favorited\nlanguage of all time.</p>\n<br />\n\n<p>The main problem is that things quickly explode the moment you go into web\nworld with complexity.  If you are trying to learn rust, I do feel like web\nworld kind of sucks to start in.</p>\n<br />\n\n<h3 id=\"why-i-didnt\">Why I didn&#39;t</h3>\n<p>Rust will likely eat up most of our time.  Not because we have to write a\nsignificant amount of code, but because its so hard at first.  So to set us up\nfor success, I wanted confine this to a specific boundary set that is most\nconsumable from a typescript perspective.</p>\n<br />\n\n<h3 id=\"the-second-thing-i-omitted\">The second thing I omitted</h3>\n<p>I will not be doing any lifetimes with rust.  The primary reason is that you\ndon&#39;t run into them a lot until you really drill down for performance.  Since\nthe goal is to teach / expose we will stay more on the happy path.</p>\n<br />\n\n<h3 id=\"canonical\">Canonical</h3>\n<p>So since there is going to be three languages used, in some sense I will keep\nthe implementations similar.  But in other ways I will try to use more of the\n&quot;canonical&quot; way of doing things.  Canonical looks differently in each language\nand javascript, I am unsure if there is such things as canonical.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"so-its-time\">So its time</h2>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"wait\">WAIT</h2>\n<p>do you have rust installed?\ndo you have go installed?</p>\n<p>Now would be an excellent time to get that done.  In fact, I think we should\ntake a quick small break just to ensure it happens.</p>\n<h3 id=\"go\">Go</h3>\n<p><a href=\"https://go.dev/doc/install\">Go Dev Docs</a> (<a href=\"https://go.dev/doc/install\">https://go.dev/doc/install</a>)</p>\n<ul>\n<li>Install the one for your operating system</li>\n<li>You will want a later version of go.  1.18 has generics, very good.</li>\n</ul>\n<h3 id=\"rust\">Rust</h3>\n<pre><code>curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre>\n<ul>\n<li>You can rustup to get nightly to have more fun features, and there are some\ngood features there.</li>\n<li>or just stick to stable for a stable journey.</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n","slug":"getting-started","title":"Getting Started","section":"Introduction","icon":"info-circle","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/01-introduction/B-getting-started.md","nextSlug":"/ts-go-rust/lessons/part-1-getting-familiar/ts-go-rust-fundamentals","prevSlug":"/ts-go-rust/lessons/introduction/intro"}},"__N_SSG":true}