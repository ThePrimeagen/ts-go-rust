{"pageProps":{"post":{"attributes":{"title":"The gotchas","description":"A couple quick tips"},"html":"<h3 id=\"go-and-pointer-receivers\">Go and pointer receivers</h3>\n<p>When defining methods on a struct you have two options</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> Foo <span class=\"hljs-keyword\">struct</span> {\n    thing <span class=\"hljs-type\">int</span>\n}\n\n<span class=\"hljs-comment\">// value receiver</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f Foo)</span></span> fA() {\n    ...\n    f.thing = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// DOESNT DO ANYTHING</span>\n}\n\n<span class=\"hljs-comment\">// pointer receiver</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Foo)</span></span> fB() {\n    ...\n    f.thing = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// CHANGES</span>\n}\n</code></pre>\n<p>my general rule of thumb is use a pointer receiver.  value receivers copy,\npointers don&#39;t.  For the most part, small structs there probably isn&#39;t going to\nbe any noticeable perf win, but it can bite you on mutation.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"one-more-on-go-structs-vs-rust-structs\">One more on go structs vs rust structs</h3>\n<p>I have been had by this one, and I am sure that anyone with any go experience\nhas been had by this as well.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> GoLangStruct <span class=\"hljs-keyword\">struct</span> {\n    y <span class=\"hljs-type\">int</span>\n    x <span class=\"hljs-type\">int</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewStruct</span><span class=\"hljs-params\">(x, y <span class=\"hljs-type\">int</span>)</span></span> GoLangStruct {\n    <span class=\"hljs-keyword\">return</span> GoLangStruct{x, y}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    fmt.Printf(<span class=\"hljs-string\">&quot;%+v\\n&quot;</span>, NewStruct(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">6</span>));\n}\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">RustLangStruct</span> {\n    y <span class=\"hljs-type\">i32</span>\n    x <span class=\"hljs-type\">i32</span>\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new_struct</span>(x <span class=\"hljs-type\">i32</span>, y <span class=\"hljs-type\">i32</span>) <span class=\"hljs-punctuation\">-&gt;</span> RustLangStruct {\n    <span class=\"hljs-keyword\">return</span> RustLangStruct{x, y};\n}\n\nfunc <span class=\"hljs-title function_ invoke__\">main</span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{:?}\\n&quot;</span>, <span class=\"hljs-title function_ invoke__\">new_struct</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">6</span>));\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"errors\">Errors</h3>\n<p>when you may encounter an error, your function should return pointer</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> Foo <span class=\"hljs-keyword\">struct</span> {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">CreateFoo</span><span class=\"hljs-params\">()</span></span> (*Foo, <span class=\"hljs-type\">error</span>) {\n    <span class=\"hljs-keyword\">if</span> some_err_condition {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Error(<span class=\"hljs-string\">&quot;Here is an error!&quot;</span>)\n    }\n\n    <span class=\"hljs-keyword\">return</span> &amp;Foo{}, <span class=\"hljs-literal\">nil</span>\n}\n\n...\nthis is where the infamous\n\n<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n}\n\ncomes from\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"rust-once-you-have-the-basics-down-is-actually-pretty-footgunless\">Rust, once you have the basics down, is actually pretty footgunless</h3>\n<p>Its only when you go into async does it go terrible.  Luckily we are not doing\nthat.  I still suck at doing it well.</p>\n<ul>\n<li>Use traits where possible to define new behavior</li>\n</ul>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Display</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Foo</span> {\n    <span class=\"hljs-comment\">/** allows for println!(&quot;{}&quot;, foo) to display **/</span>\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">From</span>&lt;<span class=\"hljs-type\">String</span>&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Foo</span> {\n    <span class=\"hljs-comment\">// allows for .into() operator to be used</span>\n}\n</code></pre>\n<ul>\n<li><p>Iterators are really powerful</p>\n</li>\n<li><p>Don&#39;t forget Option and Result <code>.map</code> function and on iterator <code>flat_map</code></p>\n</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n","slug":"probably-should-be-A-language-gotchas","title":"The gotchas","section":"Part 1 Getting Familiar","icon":"dumpster-fire","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/02-part-1-getting-familiar/E-probably-should-be-A-language-gotchas.md","nextSlug":"/ts-go-rust/lessons/part-1-getting-familiar/project-structure","prevSlug":"/ts-go-rust/lessons/part-1-getting-familiar/problem-3"}},"__N_SSG":true}