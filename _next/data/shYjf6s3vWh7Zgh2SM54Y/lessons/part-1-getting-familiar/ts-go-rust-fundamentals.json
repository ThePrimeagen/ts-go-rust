{"pageProps":{"post":{"attributes":{"description":"Let me borrow that for a moment"},"html":"<h2 id=\"the-fundamentals-of-the-languages\">The fundamentals of the languages.</h2>\n<p>We are going to go over some fundamentals of each language to hopefully make\nthe transitioning easier between these 3 languages.</p>\n<br />\n\n<p>Remember, this is fast paced, but there is room for questions, as I have even\nmade explicit stops.  If you are viewing this live on FrontEndMasters.com or\ntwitch.tv/ThePrimeagen and have a question, please feel free to throw it in the\nchat and hopefully I can answer it!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"syntax\">Syntax</h3>\n<p>I am not going to cover language specifics and syntax.</p>\n<p>Example: what happens here?  If you have some experience with rust, please\ndon&#39;t answer.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-keyword\">if</span> boolean_statement {\n    <span class=\"hljs-number\">0</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-number\">1</span>\n};\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"typescript-version\">TypeScript version</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> foo = boolean_statement ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>;\n</code></pre>\n<br />\n\n<p>So if you do have a question, speak up during those times and I&#39;ll go over\nanything specific.  But the goal here is to make a course that is geared\ntowards people who feel comfortable with programming and would like to pick up\na second or third language.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"rust-borrow-checker\">Rust Borrow Checker</h3>\n<p>Rust is famous for difficulty.  For its borrow checker.  There are memes and I\npersonally have rage quit using rust because I didn&#39;t understand the basics of\nrust.</p>\n<p>From the rearview mirror, this is simple</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"lets-start-with-other-programming-languages\">Lets start with other programming languages</h2>\n<h3 id=\"javascript\">JavaScript</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> a = [];\n<span class=\"hljs-keyword\">const</span> b = a;\nb.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b);\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"c\">C++</h3>\n<pre><code class=\"hljs language-cpp\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; a;\nstd::vector&lt;<span class=\"hljs-type\">int</span>&gt; b = a;\nb.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;a size: %zu\\n&quot;</span>, a.<span class=\"hljs-built_in\">size</span>());\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;b size: %zu\\n&quot;</span>, b.<span class=\"hljs-built_in\">size</span>());\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"rust\">Rust</h3>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">b</span> = a;\nb.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;a size: {}&quot;</span>, a.<span class=\"hljs-title function_ invoke__\">len</span>());\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;b size: {}&quot;</span>, b.<span class=\"hljs-title function_ invoke__\">len</span>());\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"the-three-types\">The three types</h2>\n<ul>\n<li>Value</li>\n<li>Reference</li>\n<li>Mutable Reference</li>\n</ul>\n<h3 id=\"the-three-simple-rules\">The three simple rules</h3>\n<h4 id=\"rule-1-value\">Rule #1: Value</h4>\n<p>Only one value owner.</p>\n<h5 id=\"note\">Note</h5>\n<p>If the object implements copy, it can be implicitly copied</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x</span> = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">y</span> = x;\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, x + y);\n</code></pre>\n<h4 id=\"rule-2-reference\">Rule #2: Reference</h4>\n<p>You can have as many references as you like with the constraint that there are\nno mutable references alive.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x</span> = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">y</span> = &amp;x;\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;here is {} and {}&quot;</span>, x, y);\n</code></pre>\n<h4 id=\"rule-31-mut-reference\">Rule #3:1 Mut Reference</h4>\n<p>You can have one mut reference and no reference at the same time.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">x</span> = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">y</span> = &amp;x;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">z</span> = &amp;<span class=\"hljs-keyword\">mut</span> x; <span class=\"hljs-comment\">// cannot borrow x as mutable</span>\n                    <span class=\"hljs-comment\">// because its already as immutable</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, x + y + z);\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"questions\">Questions?</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"moar-things-to-cover\">Moar things to cover</h3>\n<ul>\n<li>Rust + Enums (Options)<ul>\n<li>Options</li>\n</ul>\n</li>\n<li>Error Handling<ul>\n<li>Results</li>\n</ul>\n</li>\n<li>Testing</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"enums\">Enums</h3>\n<p>Lets look at emuns in typescript, go, and rust.</p>\n<p>First typescript, lets program up a quick example.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"i-should-have-typed-something-like-this\">I should have typed something like this.</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Thing</span> {\n    <span class=\"hljs-title class_\">Foo</span> = <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// or give them no value and it will start at 0 and increment</span>\n    <span class=\"hljs-title class_\">Bar</span> = <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-title class_\">Baz</span> = <span class=\"hljs-number\">3</span>,\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"what-about-go\">What about go?</h3>\n<p>Onto another example!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"code\">Code</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> Foo = <span class=\"hljs-type\">int</span>\n\n<span class=\"hljs-keyword\">const</span> (\n    Thing Foo = <span class=\"hljs-literal\">iota</span>\n    Other\n    That\n)\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"now-rust\">Now Rust</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"or-is-this-typescirpt\">Or is this typescirpt?</h3>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Thing</span> {\n    Foo, <span class=\"hljs-comment\">// or give them no value and it will start at 0 and increment</span>\n    Bar,\n    Baz,\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"why-go-over-enums\">Why go over enums...</h3>\n<p>They are simple constructs.  Well, they are simple in other languages.</p>\n<p>Lets dive more into them with rust.  Let me show you how you can add types...</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"what-my-code-should-of-approximately-looked-like\">What my code should of approximately looked like</h3>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Option2</span> {\n    Baz,\n    <span class=\"hljs-title function_ invoke__\">Foo</span>(<span class=\"hljs-type\">isize</span>),\n    <span class=\"hljs-title function_ invoke__\">Bar</span>(<span class=\"hljs-type\">String</span>),\n    <span class=\"hljs-title function_ invoke__\">Fuzz</span>(<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">String</span>&gt;), <span class=\"hljs-comment\">// string[], or a []string</span>\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">opt2</span> = Option2::<span class=\"hljs-title function_ invoke__\">Foo</span>(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">opt22</span> = Option2::<span class=\"hljs-title function_ invoke__\">Fuzz</span>(<span class=\"hljs-built_in\">vec!</span>[]);\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Option2</span>::<span class=\"hljs-title function_ invoke__\">Foo</span>(x) = opt2 {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">_</span> = x + <span class=\"hljs-number\">5</span>;\n        <span class=\"hljs-comment\">// x = 7;</span>\n    }\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Option2</span>::<span class=\"hljs-title function_ invoke__\">Fuzz</span>(vec) = &amp;<span class=\"hljs-keyword\">mut</span> opt22 {\n        vec.<span class=\"hljs-title function_ invoke__\">push</span>(String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>));\n    }\n\n    <span class=\"hljs-keyword\">match</span> opt2 {\n        Option2::Baz =&gt; todo!(),\n        Option2::<span class=\"hljs-title function_ invoke__\">Foo</span>(_) =&gt; todo!(),\n        Option2::<span class=\"hljs-title function_ invoke__\">Bar</span>(_) =&gt; todo!(),\n        Option2::<span class=\"hljs-title function_ invoke__\">Fuzz</span>(_) =&gt; todo!(),\n    }\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"what-does-this-mean\">What does this mean?</h3>\n<p>This means that you can have an enum with many types, and these types can be\ngeneric.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Foo</span>&lt;T&gt; {\n    <span class=\"hljs-title function_ invoke__\">Bar</span>(T)\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"but-how-is-this-practically-useful\">But how is this practically useful?</h3>\n<p>3 things.</p>\n<ol>\n<li>lists with many types</li>\n<li>Nullable</li>\n<li>Error Handling</li>\n</ol>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"lets-start-with-nullable-and-typescript\">Lets start with nullable and TypeScript</h3>\n<p>I think we have all seen code like this</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Foo</span> = {\n    bar?: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\">foo: Foo</span>) {\n    <span class=\"hljs-keyword\">if</span> (foo.<span class=\"hljs-property\">bar</span>) { <span class=\"hljs-comment\">// this is annoying, yes</span>\n        <span class=\"hljs-comment\">// undang</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// dang</span>\n    }\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"let-me-show-you-nullables-in-rust\">Let me show you nullables in Rust</h3>\n<p>These are Options, they are enums, they have a generic.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Option</span>&lt;T&gt; {\n    <span class=\"hljs-literal\">None</span>,\n    <span class=\"hljs-title function_ invoke__\">Some</span>(T)\n}\n</code></pre>\n<p>Lets see how you can play with these in Rust</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"potential-code-for-options\">Potential code for options</h3>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Foo</span> {\n    bar: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">i32</span>&gt;\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = Foo {\n        bar: <span class=\"hljs-literal\">None</span>\n    };\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo2</span> = Foo {\n        bar: <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>)\n    };\n\n    <span class=\"hljs-keyword\">if</span> foo.bar.<span class=\"hljs-title function_ invoke__\">is_some</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">sum</span> = foo.bar.<span class=\"hljs-title function_ invoke__\">unwrap</span>() + <span class=\"hljs-number\">5</span>;\n    }\n\n    foo.bar.<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(<span class=\"hljs-number\">0</span>);\n\n    foo.bar.<span class=\"hljs-title function_ invoke__\">unwrap_or_else</span>(|| {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span>;\n    });\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">out</span> = foo.bar.<span class=\"hljs-title function_ invoke__\">map</span>(|x| {\n        <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">5</span>;\n    });\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"questions-so-far\">Questions so far?</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"lets-implement-the-option-enum\">Lets implement the Option enum!</h3>\n<p>For fun lets try to implement <code>map</code> and <code>is_some</code> in rust on our &quot;option&quot; type.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"results-of-this\">Results of this</h3>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Option2</span>&lt;T&gt; {\n    <span class=\"hljs-literal\">None</span>,\n    <span class=\"hljs-title function_ invoke__\">Some</span>(T)\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Option2&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">map</span>(&amp;<span class=\"hljs-keyword\">self</span>, f: <span class=\"hljs-title function_ invoke__\">fn</span>(&amp;T) <span class=\"hljs-punctuation\">-&gt;</span> T) <span class=\"hljs-punctuation\">-&gt;</span> Option2&lt;T&gt; {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            Option2::<span class=\"hljs-literal\">None</span> =&gt; Option2::<span class=\"hljs-literal\">None</span>,\n            Option2::<span class=\"hljs-title function_ invoke__\">Some</span>(v) =&gt; Option2::<span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-title function_ invoke__\">f</span>(v)),\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_some</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            Option2::<span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">false</span>,\n            Option2::<span class=\"hljs-title function_ invoke__\">Some</span>(_) =&gt; <span class=\"hljs-literal\">true</span>,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">opt</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">opt2</span> = Option2::<span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">5</span>);\n\n    opt.<span class=\"hljs-title function_ invoke__\">map</span>(|x| x + <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">opt2</span> = opt2.<span class=\"hljs-title function_ invoke__\">map</span>(|x| x + <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-keyword\">if</span> opt2.<span class=\"hljs-title function_ invoke__\">is_some</span>() {\n\n    }\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"questions--that-was-pretty-radical-section\">Questions?  That was pretty radical section</h3>\n<p>Hopefully you can see the incredible value of sumtypes.</p>\n<p>There is this concept in 1984 that peoples ability to think is directly tied\nwith the language they communicate with.  I think this is true in programming\nas well.  This is one of the reasons learning a ton of languages is REALLY\nbeneficial.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"what-about-error-handling\">What about error handling?</h3>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"javascript-typescript\">JavaScript (TypeScript)</h3>\n<p>&quot;Exceptions as control flow&quot;</p>\n<p>2 types of errors that you will run across.</p>\n<ol>\n<li>returned errors</li>\n<li>thrown errors</li>\n</ol>\n<p>Pretty classic javascriptism -- conflation issues</p>\n<p>Let me program you a live example!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"code-1\">Code</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;Goodbye, World&quot;</span>);\n}\n\n<span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-title function_\">foo</span>();\n} <span class=\"hljs-keyword\">catch</span> (e) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;We had a problem, but we are ok&quot;</span>, e);\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;great success()&quot;</span>);\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<p>In general TypeScript uses exceptions for control flow and with promises its a\nmix of value vs throwing due to <code>.catch</code>.</p>\n<p>not all errors can be caught and will just simply blow up somewhere...</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"lets-look-at-go\">Lets look at Go</h3>\n<p>We haven&#39;t done much of go, but it does differ here from typescript.</p>\n<p>This is one of the most fundamental arguments against and for go is its error\nhandling. I will say that the error handling i find better than typescript but\ndefinitely more boilerplate to deal with it.</p>\n<p>The reason why i like it is because of control flow and where things can go\nwrong.</p>\n<h4 id=\"example-time\">Example time!</h4>\n<p>Remember, errors are just values</p>\n<ul>\n<li>create error</li>\n<li>return error + struct</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"the-go-code\">The go code</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;errors&quot;</span>\n    <span class=\"hljs-string\">&quot;fmt&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">example</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">error</span> {\n    <span class=\"hljs-keyword\">return</span> fmt.Errorf(<span class=\"hljs-string\">&quot;here is an error with a string&quot;</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">otherExample</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">error</span> {\n    <span class=\"hljs-keyword\">return</span> errors.New(<span class=\"hljs-string\">&quot;here is an error, but with errors&quot;</span>) <span class=\"hljs-comment\">// approx same thing</span>\n}\n\n\n<span class=\"hljs-comment\">// errors are pointers under the hood, so you can return the empty type</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">exampleNoError</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">error</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>;\n}\n\n<span class=\"hljs-keyword\">type</span> Thing <span class=\"hljs-keyword\">struct</span> { }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">exampleWithData</span><span class=\"hljs-params\">(should <span class=\"hljs-type\">bool</span>)</span></span> (*Thing, <span class=\"hljs-type\">error</span>) {\n    <span class=\"hljs-keyword\">if</span> should {\n        <span class=\"hljs-keyword\">return</span> &amp;Thing{}, <span class=\"hljs-literal\">nil</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;nice try, guy&quot;</span>)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    err := example();\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-comment\">// handle error</span>\n    }\n\n    _, err = exampleWithData(<span class=\"hljs-literal\">true</span>)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-comment\">// handle error</span>\n    }\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"rust-1\">Rust</h3>\n<p>Remember those enums (sumtypes) and how I told you they handled errors?  Well,\nhere is the <code>Result</code> type.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Result</span>&lt;V, E&gt; {\n    <span class=\"hljs-title function_ invoke__\">Err</span>(E),\n    <span class=\"hljs-title function_ invoke__\">Ok</span>(V)\n}\n</code></pre>\n<p>Lets make some examples of how to use them!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"the-code-i-wrote-on-a-sunday-morning\">The code I wrote on a sunday morning</h3>\n<p>I am sure there is a Johnny Cash reference somewhere around here.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">error</span>(num: <span class=\"hljs-type\">i32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;(), <span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">if</span> num &lt; <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>((num * -<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(());\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;(), <span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">error</span>(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-keyword\">if</span> res.<span class=\"hljs-title function_ invoke__\">is_ok</span>() {\n        <span class=\"hljs-comment\">//...</span>\n    }\n\n    <span class=\"hljs-keyword\">match</span> res {\n        <span class=\"hljs-title function_ invoke__\">Err</span>(e) =&gt; <span class=\"hljs-comment\">// ...</span>\n        <span class=\"hljs-title function_ invoke__\">Ok</span>(v) =&gt; <span class=\"hljs-comment\">// ...</span>\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x</span> = res.<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(());\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x</span> = res.<span class=\"hljs-title function_ invoke__\">expect</span>(<span class=\"hljs-string\">&quot;THIS BETTER EXIST&quot;</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x</span> = res.<span class=\"hljs-title function_ invoke__\">unwrap</span>(); <span class=\"hljs-comment\">// BAD</span>\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x</span> = res?;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Ok</span>(());\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"anyhow\">Anyhow?</h3>\n<p>A nice library for writing great code with error handling is anyhow!  Lets look\nat it</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"unit-testing\">Unit Testing!</h3>\n<ul>\n<li>TypeScript : Cries in Configuration</li>\n<li>GoLang : Meh</li>\n<li>Rust : oyes</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<pre><code class=\"hljs language-bash\">src/__tests__/test.ts\n</code></pre>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>);\n});\n</code></pre>\n<pre><code class=\"hljs language-bash\">yarn add jest ts-jest @types/jest\nnpx jest\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"go-version\">Go version</h3>\n<p>there is some contention with how / where to put your tests.</p>\n<ul>\n<li>test public interfaces only</li>\n<li>test within the package</li>\n</ul>\n<pre><code>pkg/name/file.go\npkg/name/file_test.go\n</code></pre>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> name_test\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;testing&quot;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestThisFunc</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    this := <span class=\"hljs-number\">5</span>\n    <span class=\"hljs-keyword\">if</span> this != <span class=\"hljs-number\">7</span> {\n        t.Errorf(<span class=\"hljs-string\">&quot;expected %v to equal 7&quot;</span>, this)\n    }\n}\n</code></pre>\n<pre><code class=\"hljs language-bash\">go <span class=\"hljs-built_in\">test</span> ./...\ngo <span class=\"hljs-built_in\">test</span> ./path/to/package\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"go-does-have-an-assertion-library\">Go does have an assertion library</h3>\n<p>But we will not be using it.  We will just use what is built in during this\ncourse.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"rust-version\">Rust Version</h3>\n<p>Rust, of course, is the best</p>\n<ul>\n<li>test in file</li>\n<li>One thing to be careful of is to what level private interfaces should be\ntested.</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<pre><code>... // code ...\n\n#[cfg(test)]\nmod test {\n    #[test]\n    fn this_test() {\n        assert_eq!(5, 7);\n    }\n}\n</code></pre>\n<pre><code class=\"hljs language-bash\">cargo <span class=\"hljs-built_in\">test</span>\ncargo <span class=\"hljs-built_in\">test</span> path/to/file.rs\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h3 id=\"you-will-forget-everything-i-just-said\">You will forget everything i just said</h3>\n<p>That is ok.  The best way to make it set?  Build it.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n","slug":"ts-go-rust-fundamentals","title":"Ts Go Rust Fundamentals","section":"Part 1 Getting Familiar","icon":"dumpster-fire","filePath":"/home/runner/work/ts-go-rust/ts-go-rust/lessons/02-part-1-getting-familiar/A-ts-go-rust-fundamentals.md","nextSlug":"/ts-go-rust/lessons/part-1-getting-familiar/problem-1","prevSlug":"/ts-go-rust/lessons/introduction/getting-started"}},"__N_SSG":true}